#version 460

layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, binding = 0) uniform image2D butterfly;

const float PI = 3.14159265358979323846;

layout(push_constant) uniform Params {
    int resolution;
} params;

// Euler's formula: e^(ix) = cos(x) + i*sin(x)
vec2 eulerFormula(float x) {
    return vec2(cos(x), sin(x));
}

// Bit reversal function
uint bitReverse(uint value, uint bits) {
    uint result = 0;
    for (uint i = 0; i < bits; i++) {
        result = (result << 1) | (value & uint(1));
        value >>= 1;
    }
    return result;
}

void main() {
    ivec2 id = ivec2(gl_GlobalInvocationID.xy);
    int n = params.resolution;
    int logN = int(log2(float(n)));

    if (id.x >= logN || id.y >= n) return;

    // Calculate k value
    float k = mod(id.y * (float(n) / pow(2.0, float(id.x + 1))), n);

    // Calculate twiddle factor
    vec2 twiddle = eulerFormula(-2.0 * PI * k / float(n));

    // Calculate butterfly step
    float butterflyStep = pow(2.0, float(id.x));

    // Determine butterfly wing position
    float butterflyWing;
    if (mod(id.y, pow(2.0, float(id.x + 1))) <= pow(2.0, float(id.x)))
    butterflyWing = 1.0;
    else
    butterflyWing = -1.0;

    // Calculate butterfly indices
    uint y1 = id.y;
    uint y2 = id.y;

    // Offset indices based on wing
    if (butterflyWing == 1.0)
    y2 += uint(butterflyStep);
    else
    y1 -= uint(butterflyStep);

    // Apply bit reversal for first stage
    if (id.x == 0) {
        y1 = bitReverse(y1, uint(logN));
        y2 = bitReverse(y2, uint(logN));
    }

    // Store values in texture
    imageStore(butterfly, id, vec4(twiddle.x, twiddle.y, float(y1), float(y2)));
}